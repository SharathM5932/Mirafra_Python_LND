#integration testing

#user.py
class User:
    def __init__(self):
        self.users = {}  # Stores users as `username: password`

    def register(self, username, password):
        if username in self.users:
            return "User already exists"
        self.users[username] = password
        return "User registered successfully"

    def login(self, username, password):
        if username in self.users and self.users[username] == password:
            return "Login successful"
        return "Invalid username or password"
............................
#order.py
class Order:
    def __init__(self):
        self.orders = {}  # Stores orders as `username: [list of orders]`

    def place_order(self, username, item):
        if username not in self.orders:
            self.orders[username] = []
        self.orders[username].append(item)
        return f"Order placed: {item}"

    def get_orders(self, username):
        return self.orders.get(username, [])
...........................
#test_integration.py
from user import User
from order import Order

def test_user_order_integration():
    # Initialize modules
    user_module = User()
    order_module = Order()

    # Step 1: Register a user
    assert user_module.register("john_doe", "password123") == "User registered successfully"

    # Step 2: Log in with the registered user
    assert user_module.login("john_doe", "password123") == "Login successful"

    # Step 3: Place an order as the logged-in user
    assert order_module.place_order("john_doe", "Laptop") == "Order placed: Laptop"

    # Step 4: Verify the order
    orders = order_module.get_orders("john_doe")
    assert len(orders) == 1
    assert orders[0] == "Laptop"

    print("Integration test passed!")


if __name__ == "__main__":
    test_user_order_integration()
...................
pytest test_integration.py
......................
By default, pytest looks for files named test_*.py or *_test.py and functions starting with test_. If your test file and functions follow these naming conventions, pytest will automatically recognize and execute them.