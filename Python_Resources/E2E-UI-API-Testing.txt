End-to-End Testing
API Testing
UI Testing
........................
1. UI (User Interface) Testing
Checks the graphical user interface (GUI) of an application.
Ensures buttons, forms, menus, and other UI components function correctly.
Focuses on user experience (UX) and visual consistency.

Example:
Clicking a login button and verifying that the user is redirected to the dashboard.

Tools:
Selenium, Cypress, Playwright, TestComplete
--------------------------------------
2. API (Application Programming Interface) Testing
Validates APIs (backend services) by sending requests and verifying responses.
Checks if the API returns correct data, handles errors properly, and follows security protocols.
Doesn't involve UI elements.

Example:
Sending a POST request to /login API with valid credentials and checking if it returns a 200 OK response.

Tools:
Postman, RestAssured, SoapUI, Pytest (with requests library)
--------------------------------------
3. End-to-End (E2E) Testing
Tests the complete application flow, including UI, backend, database, and integrations.
Simulates real user interactions from start to finish.
Ensures different components work together as expected.

Example:
User logs in → Searches for a product → Adds it to the cart → Completes payment → Gets order confirmation email.

Tools:
Cypress, Selenium, Playwright, TestCafe
......................................
............................
1. End-to-End Testing Example
Use Case: Testing the login functionality of a website.

pip install pytest
pip install selenium

import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


@pytest.fixture
def driver():
    driver = webdriver.Chrome()
    yield driver
    driver.quit()

def test_website_navigation(driver):
    driver.get('https://abhijithchandradas.medium.com/')
    assert driver.title == "Abhijith Chandradas – Medium"

#Check for a Specific Element on the Page
def test_check_for_element(driver):
    driver.get('https://abhijithchandradas.medium.com/')
    element = driver.find_element(By.XPATH, "//h1[text()='Abhijith Chandradas']")
    assert element.is_displayed()  # Check if the heading is displayed

#Check for a Link Navigation
def test_check_link_navigation(driver):
    driver.get('https://abhijithchandradas.medium.com/')
    link = driver.find_element(By.LINK_TEXT, "About Me")
    link.click()
    assert driver.title == "About Me – Abhijith Chandradas"  # Check if the title changes

#Check for Image Presence
def test_check_image_presence(driver):
    driver.get('https://abhijithchandradas.medium.com/')
    image = driver.find_element(By.TAG_NAME, "img")
    assert image.is_displayed()  # Check if the first image on the page is displayed


#Verify the Page Loads Within a Timeout
#sometimes passes 60%
def test_page_load_timeout(driver):
    driver.get('https://abhijithchandradas.medium.com/')
    WebDriverWait(driver, 10).until(EC.title_contains("Abhijith Chandradas"))
    assert driver.title == "Abhijith Chandradas – Medium"


def test_follow_button_click(driver):
    driver.get('https://abhijithchandradas.medium.com/')
    follow_button = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//button[text()='Follow']"))
    )
    follow_button.click()
    # Verify that the button action triggered the expected result (like changing text or state)
    assert follow_button.text == "Following"  # Example assertion, adapt to actual behavior





.........................
#API Testing Code Example
#install requests
import requests

def test_get_users():
    # Send GET request to the API
    response = requests.get("http://jsonplaceholder.typicode.com/users")

    # Check if the response status is 200 OK
    assert response.status_code == 200, "Failed to fetch users"

    # Parse JSON response and verify its content
    users = response.json()
    assert len(users) > 0, "No users found!"
    assert "name" in users[0], "Name field is missing in response"

    print("API Test Passed!")


# Calling the correct test function for API Testing
test_get_users()
