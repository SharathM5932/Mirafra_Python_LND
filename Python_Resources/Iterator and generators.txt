#iterator
l=[1,3.2,3.3,4,5]
#for i in a:print(i)
a=iter(l)
print(a)
print(next(a))
print(next(a))
print(next(a))
print(next(a))
print(a.__next__())
...........................
#iteration
class Test:
    def __init__(self, a):self.a= a
    def __iter__(self):
        self.x = 10
        return self
    def __next__(self):
        x = self.x
        if x > self.a:
            raise StopIteration
        self.x = x + 1
        return x

for i in Test(15):
    print(i)
.....................................

int()
inf=iter(int,1)
next(inf)#infinite times can go on with next(inf)
...................................................
#Generator: yield
def ten():
    n=1
    while n<=10:
        sq=n*n#9
        yield sq
        n+=1
value=ten()#1,4,9
print(value)
for i in value:print(i)
............................
#Generator: yield
def kavya():
    yield 1,2
    yield 2
    yield 3
    av=2
a=kavya()
for i in a:print(i)
..............................
#generator
#reverse string
def rev(s):
    l=len(s)
    for i in range(l-1,-1,-1):
        yield s[i]
for char in rev('Deepthi'):
    print(char)
................................
#infinite even no. stream
def all_even():
    n=0
    while True:
        yield n
        n+=2
a=all_even()
print(next(a))

.......................................
#pipelining generator-> fibonacci+square+sum
def fib(n):
    x,y=0,1
    for _ in range(n):
        x,y=y,x+y
        yield x
def square(n):
    for l in n:
        yield l**2
print(sum(square(fib(10))))

....................................
#send()
def ngen(n):#10
    num=yield#5 #so every time new value can be sent
    #only 1st time it will work (num=5)
    print('num1=',num)
    while num<n:#12
        print('a=')
        num=yield num #=5 1st iter
        print('num2=',num)
        num+=1 #in 2nd iter
        print('num3=',num)
    else:yield
g=ngen(10)
next(g) #need in order to send value to generate
#just like iter and next... yield and next will let send to send the new new values every time
#print(g.send(None))
print(g.send(5)) #num values
print(g.send(2))
print(g.send(5))
print(g.send(11))

