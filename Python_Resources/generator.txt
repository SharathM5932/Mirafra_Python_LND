#Generator
def ten():
    n=2
    yield 1
    yield 2
    n+=10#n=12
    print(n)
    yield 3
    a=121
    print(a)
for v in ten():print(v)#v=3
print('done')

....................
def rev_str(my_str):
    length = len(my_str)
    for i in range(length - 1, -1, -1):
        yield my_str[i]


# For loop to reverse the string
for char in rev_str("hello"):
    print(char)
>>> # It returns an object but does not start execution immediately.
>>> a = my_gen()

>>> # We can iterate through the items using next().
>>> next(a)
This is printed first
1
>>> # Once the function yields, the function is paused and the control is transferred to the caller.

>>> # Local variables and theirs states are remembered between successive calls.
>>> next(a)
This is printed second
2

>>> next(a)
This is printed at last
3

>>> # Finally, when the function terminates, StopIteration is raised automatically on further calls.
>>> next(a)
Traceback (most recent call last):
...
StopIteration

#or
# A simple generator function
def my_gen():
    n = 1
    print('This is printed first')
    # Generator function contains yield statements
    yield n
    n += 1
    print('This is printed second')
    yield n
    n += 1
    print('This is printed at last')
    yield n

# Using for loop
for item in my_gen():
    print(item)
--------------------------------
#Generators with a Loop
def rev_str(my_str):
    length = len(my_str)
    for i in range(length - 1, -1, -1):
        yield my_str[i]


# For loop to reverse the string
for char in rev_str("hello"):
    print(char)
--------------------
# infinite
def all_even():
    n = 0
    while True:
        yield n
        n += 2
a=all_even()
print(next(a))
print(next(a))
---------------------
#Pipelining Generators
def fibonacci_numbers(nums):
    x, y = 0, 1
    for _ in range(nums):
        x, y = y, x+y
        yield x

def square(nums):
    for num in nums:
        yield num**2

print(sum(square(fibonacci_numbers(10))))
-------------
# Generator Expression
# Initialize the list
my_list = [1, 3, 6, 10]

# square each term using list comprehension
list_ = [x**2 for x in my_list]

# same thing can be done using a generator expression
# generator expressions are surrounded by parenthesis ()
generator = (x**2 for x in my_list)

print(list_)
print(generator)
 #or
my_list = [1, 3, 6, 10]

a = (x**2 for x in my_list)
print(next(a))

print(next(a))

print(next(a))

print(next(a))

next(a)
print(sum(x**2 for x in my_list))

print(max(x**2 for x in my_list))
-------------------
#send()
def numberGenerator(n):
    number = yield
    #print(number)
    while number < n:
        number = yield number
        #print(number)
        number += 1

g = numberGenerator(10)    # Create our generator
g.send(None)

print(g.send(5))
print(g.send(6))
print(g.send(5))

